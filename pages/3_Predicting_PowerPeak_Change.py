import streamlit as st
import pandas as pd
import plotly.express as px
import joblib
import numpy as np
import sklearn

@st.cache_data
def load_model():
    return joblib.load("power_predict.joblib")

@st.cache_data
def load_stats():
    return pd.read_csv(st.secrets["small_stats_url"])

def predict(gene_dict):
    loaded_model = load_model()
    df = pd.DataFrame([gene_dict], index=[0])
    return (loaded_model.predict(df))[-1]

def render_result(col2, gene_dict):
    value = predict(gene_dict)
    st.session_state.power_value = value

    with col2:
        st.markdown(
            f"""
            <div style="margin-top: 130px; font-size:18px; font-weight:bold; color:black; padding:10px; border-radius:8px;">
                Predicted PowerPeak change (W/kg) after 12 weeks of training: 
                <span style="font-size:24px; font-weight:bold; color:blue;">
                    {value:+.2f} W/kg
                </span>
            </div>
            """,
            unsafe_allow_html=True
        )

def generate_random(mean, std, min_val, max_val):
    val = round(np.random.normal(mean, std),2)
    return str(np.clip(val, min_val, max_val))

def generate_figure(df_melted, display = True):
    fig = px.scatter(
        df_melted,
        x="Person",
        y="PowerPeak change (W/kg)",
        color="Type",
        color_discrete_map={"Predicted": "red", "Ground Truth": "blue"},
        symbol="Type",
        symbol_map={"Predicted": "square", "Ground Truth": "circle"}
    )

    fig.update_layout(
        xaxis=dict(
            title="",
            showticklabels=False
        ),
        legend_title="",
        legend=dict(
            font=dict(size=15,
                color='black',
                family="Source Sans"
            )
        ),
        margin=dict(l=20, r=20, t=30, b=20),
        height=600,
        annotations=[
            dict(
                x=1,  # far right
                y=0,  # bottom
                xref="paper",
                yref="paper",
                text="RÂ² = 0.483",
                showarrow=False,
                font=dict(
                    family="Source Sans",
                    size=20,
                    color="black"
                ),
                align="center",
                xanchor="right",
                yanchor="bottom",
                bordercolor="black",
                borderwidth=1,
                borderpad=4,
                bgcolor="rgba(217,217,214,0.8)",  # semi-transparent white
                opacity=0.9
            )
        ],
    )

    fig.update_traces(marker=dict(size=10))

    if "power_value" in st.session_state and not display:
        fig.add_scatter(
            x=[f"Your Prediction"],
            y=[round(st.session_state.power_value,2)],
            mode="markers",
            marker=dict(
                size=20,
                color="green",
                symbol="star"
            ),
            name="Your Prediction"
        )
    return fig

st.set_page_config(layout="wide")

predict_vals = [
    0.005599743186, 1.298266617, 1.891041318, 0.7535308592, 1.16681347,
    0.3959297206, 1.815427717, 1.882253625, 1.839312917, 3.049305107,
    1.506710053, 1.780577201, 3.42148162, 3.23387687, 3.832846885, 3.417289455
]

target_vals = [
    -2.607897982, 0.269361509, 0.503708835, 1.186004643, 1.195350356,
    2.224511249, 2.435519798, 2.656927711, 2.700224126, 2.812167434,
    3.045725237, 3.604506253, 4.125, 4.817310275, 4.916382253, 7.202941176
]

genes = [
    'CCDC32', 'CDIN1', 'CHURC1', 'CYP4X1', 'ENSG00000235296', 'ENSG00000275202',
    'ENSG00000284773', 'ENSG00000286970', 'EP400', 'FAM102A', 'GASK1A', 'GOLGA8J',
    'HOMER1', 'IFT27', 'ITM2B', 'KCNIP3', 'KRBOX1', 'LARGE1', 'LINC00924', 'LRRC4B',
    'LRRK1', 'MANEAL', 'NDUFB1', 'NECAP1', 'NOP2', 'PRKCH-AS1', 'PRKCSH', 'PRPF40A',
    'PTPRC', 'PUM3', 'PXDNL', 'RFTN1', 'SCGB1D2', 'SLC38A7', 'SLC6A16', 'SNX7',
    'VPS35L', 'ZNF570'
]

df = pd.DataFrame({
    "Person": [f"Person {i+1}" for i in range(len(predict_vals))],
    "Predicted": predict_vals,
    "Ground Truth": target_vals
})

df_melted = df.melt(
    id_vars="Person",
    value_vars=["Predicted", "Ground Truth"],
    var_name="Type",
    value_name="PowerPeak change (W/kg)"
)

empty = st.empty()

fig = generate_figure(df_melted=df_melted)
with empty:
    st.plotly_chart(fig, use_container_width=True)
col1, col2 = st.columns([2, 1])

with col1:
    st.markdown(
        f"""
        <div style="margin-top:0px; font-size:18px; color:black;">
            <p>Insert normalized basal expression of each gene:</p>
            <span style="font-size:15px; color:grey;">
                Normalized counts were generated by the DESeq2 pipeline using <br>the estimateSizeFactors() and counts(normalized = TRUE).
            </span>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.markdown(
        """
        <style>
        /* Target the scroll-box container specifically */
        div[data-testid="stForm"] > div:nth-child(1) {
            height: 300px;      /* match plot height */
            overflow-y: auto;   /* enable vertical scroll */
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    with st.form("gene_input_form", clear_on_submit=False):
        # All text inputs go here
        gene_inputs = {}
        if "power_gen_random" not in st.session_state:
            st.session_state.power_gen_random = False

        if "power_random_gene_vals" not in st.session_state:
            st.session_state.power_random_gene_vals = {}  # store randoms here

        df = load_stats()
        df = df.set_index("Unnamed: 0")

        for g in genes:
            if st.session_state.power_gen_random:
                if g not in st.session_state.power_random_gene_vals:
                    # Generate only once per gene
                    row_df = df.loc[g]
                    st.session_state.power_random_gene_vals[g] = generate_random(
                        row_df["mean"], row_df["std"], row_df["min"], row_df["max"]
                    )
                gene_inputs[g] = st.text_input(g, value=st.session_state.power_random_gene_vals[g])

            else:
                gene_inputs[g] = st.text_input(g, value="")

        submitted = st.form_submit_button("Submit")

        if submitted:
            if any(v.strip() == "" for v in gene_inputs.values()):
                st.error("Please fill in all gene values.")
            else:
                st.success("Values successfully submitted!")
                gene_dict_float = {k: float(v) for k, v in gene_inputs.items()}
                render_result(col2, gene_dict_float)

    if st.button("Generate Synthetic Values"):
        st.session_state.power_gen_random = True
        st.session_state.power_random_gene_vals = {}
        st.rerun()

    if st.button("Remove Synthetic Values"):
        st.session_state.power_gen_random = False
        st.session_state.power_random_gene_vals = {}
        st.rerun()

if "power_value" in st.session_state:
    new_fig = generate_figure(df_melted, display = False)
    with empty:
        st.plotly_chart(new_fig, use_container_width=True)